import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
//import { fetchCount } from './counterAPI';

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
{/*
export const incrementAsync = createAsyncThunk( 'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
*/}

export interface GlobalState {
  status: 'idle' | 'loading' | 'failed' | 'addTask';
  navState: 'idle'| 'expanded'| 'collapsed'
}

const initialState: GlobalState = {
  status: 'idle',
  navState: 'expanded'
};


export const globalSlice = createSlice({
  name: 'global',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setLoading: state => {state.status = 'loading'},
    setIdle: state => {state.status = 'idle'}, 
    setFailed: state => {state.status = 'failed'},
    setAddTask: state => {state.status = 'addTask'},
    toggleNavState: state => {state.navState === 'expanded' ? state.navState = 'collapsed' : state.navState = 'expanded'}
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: 
  {}
}
);

export const {setLoading, setIdle, setFailed,setAddTask, toggleNavState} = globalSlice.actions;
export default globalSlice.reducer;
//export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };
*/